package com.fintech.homework_4.fragments

import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.widget.doAfterTextChanged
import androidx.fragment.app.Fragment
import androidx.fragment.app.setFragmentResultListener
import com.fintech.homework_4.data.Message
import com.fintech.homework_4.R
import com.fintech.homework_4.adapters.MessageListAdapter
import com.fintech.homework_4.data.CurrentUser
import com.fintech.homework_4.data.Emojies
import com.fintech.homework_4.data.Reaction
import com.fintech.homework_4.databinding.FragmentTopicBinding
import com.fintech.homework_4.interfaces.BottomSheetDialogListener
import com.fintech.homework_4.interfaces.OnEmojiFlexClickListener
import java.util.*

class TopicFragment : Fragment(), OnEmojiFlexClickListener, BottomSheetDialogListener {

    private var _binding: FragmentTopicBinding? = null
    private val binding get() = _binding!!

    private val messageList: MutableList<Message> = mutableListOf()
    private val recyclerAdapter = MessageListAdapter(messageList, this, this)

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentTopicBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        for (i in 1..3) {
            val reactions = mutableListOf<Reaction>()
            for (j in 1..i) {
                reactions.add(Reaction(j, Emojies.getEmoji(0)))
            }
            messageList.add(
                Message(
                    i,
                    "user $i",
                    "Hardcoded you id = 1, emoji in this message generated by 1 - $i id",
                    reactions,
                    Date(Date().time - 86400000 * (3 - i)) //hardcoded date
                )
            )
        }

        binding.messageRecycler.adapter = recyclerAdapter
        recyclerAdapter.notifyDataSetChanged()

        binding.input.doAfterTextChanged {
            if (it?.length ?: 0 > 0) {
                binding.sendImage.setBackgroundResource(R.drawable.ic_vector_send)
                binding.sendImage.setOnClickListener {
                    messageList.add(
                        Message(
                            CurrentUser.id,
                            "User",
                            binding.input.text.toString(),
                            mutableListOf(),
                            Date()
                        )
                    ) //hardcoded id
                    recyclerAdapter.notifyItemInserted(messageList.size - 1)
                    binding.messageRecycler.scrollToPosition(messageList.size - 1)
                }
            } else {
                binding.sendImage.setBackgroundResource(R.drawable.ic_vector_plus)
                binding.sendImage.setOnClickListener {
                    TODO()
                }
            }
        }
    }

    override fun onEmojiFlexClick(messagePosition: Int, reaction: Reaction) {
        if (recyclerAdapter.dataSet[messagePosition].reactions.contains(reaction)) {
            recyclerAdapter.dataSet[messagePosition].reactions.remove(reaction)
        } else {
            recyclerAdapter.dataSet[messagePosition].reactions.add(reaction)
        }
        recyclerAdapter.notifyItemChanged(messagePosition)
    }

    override fun showBottomSheetDialog(context: Context, messageId: Int) {
        setFragmentResultListener("reactionEmojiKey") { _, bundle ->
            val resultSmile = bundle.getInt("bundleReactionEmojiKey")
            val smile = Emojies.getEmoji(resultSmile)
            onEmojiFlexClick(messageId, Reaction(CurrentUser.id, smile))
        }
        val emojiBottomSheet = EmojiBottomSheet.newInstance(messageId)
        emojiBottomSheet.show(
            childFragmentManager,
            emojiBottomSheet.tag
        )
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        @JvmStatic
        fun newInstance() = TopicFragment()
    }
}