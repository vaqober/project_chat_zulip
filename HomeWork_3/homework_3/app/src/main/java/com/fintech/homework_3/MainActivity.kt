package com.fintech.homework_3

import android.content.Context
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.EditText
import android.widget.ImageView
import androidx.core.widget.doAfterTextChanged
import androidx.recyclerview.widget.RecyclerView
import com.fintech.homework_3.adapters.MessageListAdapter
import com.fintech.homework_3.data.Emojies
import com.fintech.homework_3.data.Reaction
import com.fintech.homework_3.data.CurrentUser
import com.fintech.homework_3.interfaces.BottomSheetDialogListener
import com.fintech.homework_3.interfaces.OnEmojiFlexClickListener
import java.util.*

class MainActivity : AppCompatActivity(), OnEmojiFlexClickListener, BottomSheetDialogListener {

    private val messageList: MutableList<Message> = mutableListOf()
    private val recyclerAdapter = MessageListAdapter(messageList, this, this)

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val chatRecycler = findViewById<RecyclerView>(R.id.messageRecyclerView)
        val sendImage = findViewById<ImageView>(R.id.send_image)
        val input = findViewById<EditText>(R.id.input)

        for (i in 1..3) {
            val reactions = mutableListOf<Reaction>()
            for (j in 1..i) {
                reactions.add(Reaction(j, Emojies.getEmoji(0)))
            }
            messageList.add(
                Message(
                    i,
                    "user $i",
                    "Hardcoded you id = 1, emoji in this message generated by 1 - $i id",
                    reactions,
                    Date(Date().time - 86400000 * (3 - i)) //hardcoded date
                )
            )
        }


        chatRecycler.adapter = recyclerAdapter
        recyclerAdapter.notifyDataSetChanged()

        input.doAfterTextChanged {
            if (it?.length ?: 0 > 0) {
                sendImage.setBackgroundResource(R.drawable.ic_vector_send)
                sendImage.setOnClickListener {
                    messageList.add(
                        Message(
                            CurrentUser.id,
                            "User",
                            input.text.toString(),
                            mutableListOf(),
                            Date()
                        )
                    ) //hardcoded id
                    recyclerAdapter.notifyItemInserted(messageList.size - 1)
                    chatRecycler.scrollToPosition(messageList.size - 1)
                }
            } else {
                sendImage.setBackgroundResource(R.drawable.ic_vector_plus)
                sendImage.setOnClickListener {
                    TODO()
                }
            }
        }
    }

    override fun onEmojiFlexClick(messagePosition: Int, reaction: Reaction) {
        if (recyclerAdapter.dataSet[messagePosition].reactions.contains(reaction)) {
            recyclerAdapter.dataSet[messagePosition].reactions.remove(reaction)
        } else {
            recyclerAdapter.dataSet[messagePosition].reactions.add(reaction)
        }
        recyclerAdapter.notifyItemChanged(messagePosition)
    }

    override fun showBottomSheetDialog(context: Context, messageId: Int) {
        val emojiBottomSheet = EmojiBottomSheet()
        val bundle = Bundle()
        bundle.putInt("message", messageId)
        emojiBottomSheet.arguments = bundle
        emojiBottomSheet.show(
            (context as AppCompatActivity).supportFragmentManager,
            emojiBottomSheet.tag
        )
    }

}